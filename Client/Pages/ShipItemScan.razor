@page "/ECOrder/ShipItemScan"
@using Data;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<ShipItemScan> logger

<select class="form-group col-6" id="ScanType" @bind="@ScanType" required disabled>
    <option value="N17">トータル検品</option><!--!-->
    <option value="N18">オーダー検品</option><!--!-->
    <option value="N19">AMR検品</option><!--!-->
</select>
<div class="form-row">
    <div class="form-group col-6">
        <label class="mb-0" for="BarCodeValue">バーコード値</label>
        <input class="form-control" id="BarCodeValue"@oninput="BarCodeScan" placeholder="バーコードをスキャン" autofocus />
    </div>
</div>
<div class="form-row">
    <select class="form-group col-6" id="ShippingPointCode" @bind="@ShippingPointCode" required disabled>
        <option value="100">Yashio Dock</option><!--!-->
        <option value="110" selected>Sugito Dock</option><!--!-->
    </select>
    <div class="form-group col-6">
        <button class="btn btn-primary rounded-pill ml-3" style="background-color: #00B8BE; border-color: #00B8BE;" @onclick="@SkipItemScan"><span class="mx-2">検品スキップ</span></button>
    </div>
</div>

<div class="form-row">
    <div class="form-group col-6">
        <label class="mb-0" for="ShippingGroupName">出荷グループ名</label>
        <input class="form-control" id="ShippingGroupName" @bind-value="@PickingDetail.ShippingGroupName" placeholder="出荷グループ名を入力" disabled />
    </div>
    <div class="form-group col-6">
        <label class="mb-0" for="ShipID">出荷管理No</label>
        <input class="form-control" id="ShipID" @bind="@PickingDetail.ShipID" placeholder="出荷管理Noを入力" disabled />
    </div>
</div>

<div class="form-row">
    <div class="form-group col-6">
        <label class="mb-0" for="CompanyName">会社名</label>
        <input class="form-control" id="CompanyName" @bind-value="@PickingDetail.CompanyName" placeholder="会社名を入力" disabled />
    </div>
    <div class="form-group col-6">
        <label class="mb-0" for="OrderNo">オーダーNo</label>
        <input class="form-control" id="OrderNo" @bind-value="@PickingDetail.OrderNo" placeholder="オーダーNoを入力" disabled />
    </div>
</div>

<div class="form-row">
    <div class="form-group col-6">
        <label class="mb-0" for="TransporterName">運送会社名</label>
        <input class="form-control" id="TransporterName" @bind-value="@PickingDetail.TransporterName" placeholder="運送会社を入力" disabled />
    </div>
    <div class="form-group col-6">
        <label class="mb-0" for="ShippingName">届け先名</label>
        <input class="form-control" id="OrderNo" @bind-value="@PickingDetail.OrderNo" placeholder="届け先名を入力" disabled />
    </div>
</div>

<div class="form-row">
    <div class="form-group col-6">
        <label class="mb-0" for="PickingDescription">出荷指示特記事項</label>
        <input class="form-control" id="PickingDescritption" @bind-value="@PickingDetail.PickingDescription" placeholder="出荷指示特記事項を入力" disabled />
    </div>
    <div class="form-group col-6">
        <label class="mb-0" for="ECReceiptNo">領収書No</label>
        <input class="form-control" id="ECReceiptNo" @bind-value="@PickingDetail.ECReceiptNo" placeholder="領収書Noを入力" disabled />
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th class="align-top">JANコード</th>
            <th class="align-top">商品コード</th>
            <th class="align-top">商品名</th>
            <th class="align-top">出荷数</th>
            <th class="align-top">検品数</th>
        </tr>
    </thead>
    <tbody>
        @if(PickingDetail.shipItemList != null)
        {
            @foreach (var rowObj in PickingDetail.shipItemList)
            {
                <tr class="@DetailRowCssClass(rowObj.DelivSlipNonPrintFlag)">
                    <td class="align-middle" style="width: 6%">
                        @if (String.IsNullOrEmpty(rowObj.ItemImage))
                        {
                            <img src="/img/noimg.svg" alt="" style="object-fit: contain; width: 80px; height: 80px;">
                        }
                        else
                        {
                            <img src="@rowObj.ItemImage" alt="" style="object-fit: contain; width: 80px; height: 80px;">
                        }
                    </td>
                    <td class="align-middle sc-table-cell" style="width: 20%; max-width: 0;">
                        <div>@rowObj.GTINCode</div>
                    </td>
                    <td class="align-middle sc-table-cell" style="width: 20%; max-width: 0;">
                        <div>@rowObj.ItemNo</div>
                    </td>
                    <td class="align-middle" style="width: 20%; max-width: 0">
                        <div class="sc-table-ellipsis">@rowObj.ItemName</div>
                    </td>
                    <td class="align-middle" style="width: 10%">
                        <div>@rowObj.QtyPrint 個</div>
                    </td>
                    <td class="align-middle" style="width: 10%">
                        <div>@rowObj.QtyPick 個</div>
                    </td>
                </tr>
            }
        }
        
    </tbody>
</table>
@*<button class="btn btn-primary rounded-pill ml-3" style="background-color: #00B8BE; border-color: #00B8BE;" @onclick="@ExportFile"><span class="mx-2">入荷済み情報をエクスポート</span></button>*@

@code {
    private PickingDetail PickingDetail = new PickingDetail();
    private List<PickingDetail> PickingDetailList = new List<PickingDetail>();
    private string ScanType;
    private string ShippingPointCode;

    private bool isClickProcessingFlag = false;
    private bool searchProcessingFlag = false;
    private string BarCodeValue = "";

    protected override async Task OnInitializedAsync()
    {
        PickingDetail.ShippingGroupName = null;
        PickingDetail.CompanyName = null;
        PickingDetail.OrderNo = null;
        PickingDetail.TransporterName = null;
        PickingDetail.ShippingName = null;
        PickingDetail.PickingDescription = null;
        PickingDetail.ECReceiptNo = 0;
        PickingDetail.shipItemList = null;
        //PickingDetail.shipItemList = new List<ShipItemList>();
        //    PickingDetail.shipItemList.Add(
        //        new ShipItemList
        //            {
        //                GTINCode = null,
        //                ItemNo = null,
        //                ItemImage = null,
        //                DelivSlipNonPrintFlag = null,
        //                ItemName = null,
        //                QtyPrint = 0,
        //                QtyPick = 0
        //});
    }

    private async Task BarCodeScan(ChangeEventArgs args)
    {
        BarCodeValue = (string)args.Value;
        //商品明細がない場合、検品開始時のスキャンモードになる
        if (PickingDetail.shipItemList == null && BarCodeValue.Length >= 13)
        {
            if (BarCodeValue.Length == 13)
            {
                await GetPickingData();
            }
            else
            {
                await JSRuntime.InvokeAsync<string>("alert", "トータルピックのバーコードではありません。");
            }
        }


    }

    //検品スキップ
    private async Task SkipItemScan()
    {

    }


    private async Task GetPickingData()
    {
        searchProcessingFlag = true;
        PickingDetailList = await Http.GetFromJsonAsync<List<PickingDetail>>($"api/pickingData/show/?BarCodeValue={BarCodeValue}");
        logger.LogInformation("API Execute");
        PickingDetail = PickingDetailList.First();
        logger.LogInformation("PickingDetail Bind");
        //商品明細行をクリアする
        if (PickingDetail.shipItemList != null)
        {
            PickingDetail.shipItemList.Clear();
        }
        logger.LogInformation("ShipItem Clear");
        var shipItemList = new List<ShipItem>();
        foreach(var row in PickingDetailList)
        {
            var shipItem = new ShipItem();
            shipItem.GTINCode = row.GTINCode;
            shipItem.ItemNo = row.ItemNo;
            shipItem.ItemName = row.ItemName;
            shipItem.ItemImage = row.ItemImage;
            shipItem.DelivSlipNonPrintFlag = row.DelivSlipNonPrintFlag;
            shipItem.QtyPrint = row.QtyPrint;
            shipItem.QtyPick = row.QtyPick;
            shipItemList.Add(shipItem);
        }
        logger.LogInformation("ShipItem Bind");
        PickingDetail.shipItemList = shipItemList;
        logger.LogInformation(PickingDetail.ShipID);

        searchProcessingFlag = false;
    }


    private string DetailRowCssClass(string siteAllocateState)
    {
        if (siteAllocateState.Equals("商品"))
        {
            return "";
        }
        else
        {
            return "alert-row";
        }
    }
}